import{B as e}from"./base-cd_CWH7c.js";import{BiometryType as i,BiometryErrorType as t,getBiometryName as r,BiometryError as o}from"./index-BlMPjVFs.js";import"./index-C2hV942_.js";import"./react-vendor-B4gIioy9.js";import"./icons-Cn7BKMG2.js";class s extends e{constructor(){super(...arguments),this.biometryType=i.none,this.biometryTypes=[],this.biometryIsEnrolled=!1,this.deviceIsSecure=!1}async checkBiometry(){const e=this.biometryType!==i.none,r=e&&this.biometryIsEnrolled;let o="",s=t.none;return e?this.biometryIsEnrolled||(o="Biometry is not enrolled",s=t.biometryNotEnrolled):(o="No biometry is available",s=t.biometryNotAvailable),Promise.resolve({isAvailable:r,strongBiometryIsAvailable:this.biometryIsEnrolled&&this.hasStrongBiometry(),biometryType:this.biometryType,biometryTypes:this.biometryTypes,deviceIsSecure:this.deviceIsSecure,reason:o,code:s})}hasStrongBiometry(){return this.biometryTypes.some((e=>e===i.faceId||e===i.touchId||e===i.fingerprintAuthentication))}async internalAuthenticate(e){const s=await this.checkBiometry();if(!s.isAvailable||!confirm((null==e?void 0:e.reason)||`Authenticate with ${s.biometryTypes.map((e=>r(e))).join(" or ")}?`)){if(null==e?void 0:e.allowDeviceCredential){if(s.deviceIsSecure){if(confirm("Authenticate with device security?"))return;throw new o("User cancelled",t.userCancel)}if(s.isAvailable)throw new o("Device is not secure",t.noDeviceCredential)}else if(!s.isAvailable)throw s.biometryType===i.none?new o("Biometry is not available",t.biometryNotAvailable):new o("Biometry is not enrolled",t.biometryNotEnrolled);throw new o("User cancelled",t.userCancel)}}async setBiometryType(e){if(void 0===e)return Promise.resolve();const t=Array.isArray(e)?e:[e];if(this.biometryTypes=[],this.biometryType=i.none,0===t.length)return Promise.resolve();if(r=t,Object.values(i).includes(r[0]))this.biometryType=t[0],this.biometryType!==i.none&&(this.biometryTypes=t);else for(let o=0;o<t.length;o++)if(i.hasOwnProperty(t[o])){const e=i[t[o]];this.biometryType===i.none?this.biometryTypes=[]:this.biometryTypes.push(e),0===o&&(this.biometryType=e)}var r;return Promise.resolve()}async setBiometryIsEnrolled(e){return this.biometryIsEnrolled=e,Promise.resolve()}async setDeviceIsSecure(e){return this.deviceIsSecure=e,Promise.resolve()}}export{s as BiometricAuthWeb};
